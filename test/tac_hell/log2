[32m+ test_ir: src/ast.cpp:1343: virtual CTacAddr* CAstBinaryOp::ToTac(CCodeBlock*): Assertion `binaryOp != opNotEqual' failed.
[0m[31m- [[ module: test
[0m[31m-   [[ type manager
[0m[31m-     base types:
[0m[31m-       <NULL>
[0m[31m-       <int>
[0m[31m-       <char>
[0m[31m-       <bool>
[0m[31m-       <ptr(4) to <NULL>>
[0m[31m-     pointer types:
[0m[31m-       <ptr(4) to <NULL>>
[0m[31m-       <ptr(4) to <array of <char>>>
[0m[31m-       <ptr(4) to <array 52 of <array 96 of <array 97 of <array 81 of <array 54 of <int>>>>>>>
[0m[31m-       <ptr(4) to <array 76 of <array 74 of <array 60 of <array 40 of <array 82 of <int>>>>>>>
[0m[31m-     array types:
[0m[31m-       <array of <char>>
[0m[31m-       <array 54 of <int>>
[0m[31m-       <array 81 of <array 54 of <int>>>
[0m[31m-       <array 97 of <array 81 of <array 54 of <int>>>>
[0m[31m-       <array 96 of <array 97 of <array 81 of <array 54 of <int>>>>>
[0m[31m-       <array 52 of <array 96 of <array 97 of <array 81 of <array 54 of <int>>>>>>
[0m[31m-       <array 82 of <int>>
[0m[31m-       <array 40 of <array 82 of <int>>>
[0m[31m-       <array 60 of <array 40 of <array 82 of <int>>>>
[0m[31m-       <array 74 of <array 60 of <array 40 of <array 82 of <int>>>>>
[0m[31m-       <array 76 of <array 74 of <array 60 of <array 40 of <array 82 of <int>>>>>>
[0m[31m-   ]]
[0m[31m-   [[
[0m[31m-     [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>     ]
[0m[31m-     [ *DOFS(<ptr(4) to <NULL>>) --> <int>     ]
[0m[31m-     [ *ReadInt() --> <int>     ]
[0m[31m-     [ *WriteChar(<char>) --> <NULL>     ]
[0m[31m-     [ *WriteInt(<int>) --> <NULL>     ]
[0m[31m-     [ *WriteLn() --> <NULL>     ]
[0m[31m-     [ *WriteStr(<ptr(4) to <array of <char>>>) --> <NULL>     ]
[0m[31m-     [ *dummyBOOLfunc() --> <bool>     ]
[0m[31m-     [ *dummyCHARfunc() --> <char>     ]
[0m[31m-     [ *dummyINTfunc() --> <int>     ]
[0m[31m-     [ *dummyProcedure() --> <NULL>     ]
[0m[31m-     [ *f0(<ptr(4) to <array 52 of <array 96 of <array 97 of <array 81 of <array 54 of <int>>>>>>>,<char>,<ptr(4) to <array 76 of <array 74 of <array 60 of <array 40 of <array 82 of <int>>>>>>>) --> <NULL>     ]
[0m[31m-     [ *f1(<bool>,<bool>,<char>) --> <char>     ]
[0m[31m-     [ $t0       <int>     ]
[0m[31m-     [ $t1       <bool>     ]
[0m[31m-     [ $t2       <char>     ]
[0m[31m-     [ $t3       <bool>     ]
[0m[31m-     [ $t4       <int>     ]
[0m[31m-     [ $t5       <int>     ]
[0m[31m-     [ $t6       <bool>     ]
[0m[31m-     [ $t7       <bool>     ]
[0m[31m-     [ $t8       <bool>     ]
[0m[31m-     [ $t9       <char>     ]
[0m[31m-     [ @v0       <char>     ]
[0m[31m-     [ @v1       <int>     ]
[0m[31m-     [ @v2       <bool>     ]
[0m[31m-   ]]
[0m[31m-   [[ test
[0m[31m-       0:     return 
[0m[31m-       1:     sub    t0 <- 71339, 91122
[0m[31m-       2:     if     86101 >= t0 goto 2_if_true
[0m[31m-       3:     goto   3_if_false
[0m[31m-       4: 2_if_true:
[0m[31m-       5:     goto   1
[0m[31m-       6: 3_if_false:
[0m[31m-       7: 1:
[0m[31m-       8:     if     97 >= 97 goto 6_if_true
[0m[31m-       9:     goto   7_if_false
[0m[31m-      10: 6_if_true:
[0m[31m-      11:     param  2 <- 99
[0m[31m-      12:     if     21549 # 3500 goto 10
[0m[31m-      13:     goto   11
[0m[31m-      14: 10:
[0m[31m-      15:     assign t1 <- 1
[0m[31m-      16:     goto   12
[0m[31m-      17: 11:
[0m[31m-      18:     assign t1 <- 0
[0m[31m-      19: 12:
[0m[31m-      20:     param  1 <- t1
[0m[31m-      21:     param  0 <- 1
[0m[31m-      22:     call   t2 <- f1
[0m[31m-      23:     goto   14
[0m[31m-      24: 14:
[0m[31m-      25:     goto   5
[0m[31m-      26: 7_if_false:
[0m[31m-      27: 5:
[0m[31m-      28: 18_while_cond:
[0m[31m-      29:     if     99 = 97 goto 19_while_body
[0m[31m-      30:     goto   17
[0m[31m-      31: 19_while_body:
[0m[31m-      32: 22_while_cond:
[0m[31m-      33:     if     64722 <= 37699 goto 23_while_body
[0m[31m-      34:     goto   21
[0m[31m-      35: 23_while_body:
[0m[31m-      36:     goto   22_while_cond
[0m[31m-      37: 21:
[0m[31m-      38:     goto   18_while_cond
[0m[31m-      39: 17:
[0m[31m-      40: 26_while_cond:
[0m[31m-      41:     if     100 > 98 goto 27_while_body
[0m[31m-      42:     goto   25
[0m[31m-      43: 27_while_body:
[0m[31m-      44:     goto   26_while_cond
[0m[31m-      45: 25:
[0m[31m-      46:     assign v0 <- 97
[0m[31m-      47:     call   t3 <- dummyBOOLfunc
[0m[31m-      48: 32_while_cond:
[0m[31m-      49:     goto   31
[0m[31m-      50:     call   t4 <- ReadInt
[0m[31m-      51:     goto   32_while_cond
[0m[31m-      52: 31:
[0m[31m-      53:     goto   38
[0m[31m-      54: 38:
[0m[31m-      55:     return 
[0m[31m-      56:     call   t5 <- dummyINTfunc
[0m[31m-      57:     assign v1 <- 22579
[0m[31m-      58:     if     100 # 100 goto 45
[0m[31m-      59:     goto   46
[0m[31m-      60: 45:
[0m[31m-      61:     assign t6 <- 1
[0m[31m-      62:     goto   47
[0m[31m-      63: 46:
[0m[31m-      64:     assign t6 <- 0
[0m[31m-      65: 47:
[0m[31m-      66:     assign v2 <- t6
[0m[31m-      67: 50_while_cond:
[0m[31m-      68:     goto   50_while_cond
[0m[31m-      69:     goto   35
[0m[31m-      70: 35:
[0m[31m-      71:     param  2 <- 99
[0m[31m-      72:     if     97 <= 97 goto 53
[0m[31m-      73:     goto   54
[0m[31m-      74: 53:
[0m[31m-      75:     assign t7 <- 1
[0m[31m-      76:     goto   55
[0m[31m-      77: 54:
[0m[31m-      78:     assign t7 <- 0
[0m[31m-      79: 55:
[0m[31m-      80:     param  1 <- t7
[0m[31m-      81:     assign t8 <- 1
[0m[31m-      82:     goto   59
[0m[31m-      83:     assign t8 <- 0
[0m[31m-      84: 59:
[0m[31m-      85:     param  0 <- t8
[0m[31m-      86:     call   t9 <- f1
[0m[31m-      87:     assign v0 <- t9
[0m[31m-   ]]
[0m[31m- 
[0m[31m-   [[ procedure: dummyINTfunc
[0m[31m-     [[
[0m[31m-     ]]
[0m[31m-     [[ dummyINTfunc
[0m[31m-     ]]
[0m[31m-   ]]
[0m[31m- 
[0m[31m-   [[ procedure: dummyCHARfunc
[0m[31m-     [[
[0m[31m-     ]]
[0m[31m-     [[ dummyCHARfunc
[0m[31m-     ]]
[0m[31m-   ]]
[0m[31m- 
[0m[31m-   [[ procedure: dummyBOOLfunc
[0m[31m-     [[
[0m[31m-     ]]
[0m[31m-     [[ dummyBOOLfunc
[0m[31m-     ]]
[0m[31m-   ]]
[0m[31m- 
[0m[31m-   [[ procedure: dummyProcedure
[0m[31m-     [[
[0m[31m-     ]]
[0m[31m-     [[ dummyProcedure
[0m[31m-     ]]
[0m[31m-   ]]
[0m[31m- 
[0m[31m-   [[ procedure: f0
[0m[31m-     [[
[0m[31m-       [ $t0       <int>       ]
[0m[31m-       [ %v0       <ptr(4) to <array 52 of <array 96 of <array 97 of <array 81 of <array 54 of <int>>>>>>>       ]
[0m[31m-       [ %v1       <char>       ]
[0m[31m-       [ %v2       <ptr(4) to <array 76 of <array 74 of <array 60 of <array 40 of <array 82 of <int>>>>>>>       ]
[0m[31m-     ]]
[0m[31m-     [[ f0
[0m[31m-         0:     assign v1 <- 100
[0m[31m-         1: 2_while_cond:
[0m[31m-         2:     if     98 # 97 goto 3_while_body
[0m[31m-         3:     goto   1
[0m[31m-         4: 3_while_body:
[0m[31m-         5:     goto   2_while_cond
[0m[31m-         6: 1:
[0m[31m-         7:     return 
[0m[31m-         8:     return 
[0m[31m-         9: 8_while_cond:
[0m[31m-        10:     if     71714 < 87335 goto 9_while_body
[0m[31m-        11:     goto   7
[0m[31m-        12: 9_while_body:
[0m[31m-        13:     goto   8_while_cond
[0m[31m-        14: 7:
[0m[31m-        15: 12_while_cond:
[0m[31m-        16:     call   t0 <- dummyINTfunc
[0m[31m-        17:     if     82093 > t0 goto 13_while_body
[0m[31m-        18:     goto   11
[0m[31m-        19: 13_while_body:
[0m[31m-        20:     goto   12_while_cond
[0m[31m-        21: 11:
[0m[31m-        22:     return 
[0m[31m-        23:     goto   17_if_true
[0m[31m-        24: 17_if_true:
[0m[31m-        25:     goto   16
[0m[31m-        26: 16:
[0m[31m-        27:     if     100 < 99 goto 21_if_true
[0m[31m-        28:     goto   22_if_false
[0m[31m-        29: 21_if_true:
[0m[31m-        30:     return 
[0m[31m-        31:     goto   20
[0m[31m-        32: 22_if_false:
[0m[31m-        33: 20:
[0m[31m-        34:     if     100 = 98 goto 26_if_true
[0m[31m-        35:     goto   27_if_false
[0m[31m-        36: 26_if_true:
[0m[31m-        37:     goto   25
[0m[31m-        38: 27_if_false:
[0m[31m-        39: 25:
[0m[31m-     ]]
[0m[31m-   ]]
[0m[31m- 
[0m[31m-   [[ procedure: f1
[0m[31m-     [[
[0m[31m-       [ $t0       <char>       ]
[0m[31m-       [ $t1       <char>       ]
[0m[31m-       [ $t2       <char>       ]
[0m[31m-       [ %v0       <bool>       ]
[0m[31m-       [ %v1       <bool>       ]
[0m[31m-       [ %v2       <char>       ]
[0m[31m-     ]]
[0m[31m-     [[ f1
[0m[31m-         0:     call   t0 <- dummyCHARfunc
[0m[31m-         1:     return 100
[0m[31m-         2:     call   t1 <- dummyCHARfunc
[0m[31m-         3:     assign v2 <- t1
[0m[31m-         4: 4_while_cond:
[0m[31m-         5: 7_while_cond:
[0m[31m-         6:     if     98 >= 99 goto 8_while_body
[0m[31m-         7:     goto   6
[0m[31m-         8: 8_while_body:
[0m[31m-         9:     goto   7_while_cond
[0m[31m-        10: 6:
[0m[31m-        11:     goto   4_while_cond
[0m[31m-        12:     assign v2 <- 97
[0m[31m-        13:     return 97
[0m[31m-        14:     call   t2 <- dummyCHARfunc
[0m[31m-        15:     param  0 <- t2
[0m[31m-        16:     call   WriteChar
[0m[31m-        17:     return 97
[0m[31m-        18: 15_while_cond:
[0m[31m-        19:     goto   15_while_cond
[0m[31m-        20:     assign v2 <- 99
[0m[31m-        21:     goto   18
[0m[31m-        22: 18:
[0m[31m-     ]]
[0m[31m-   ]]
[0m[31m- ]]
[0m[31m- 
[0m[31m- run the following command to convert the .dot file into a PDF:
[0m[31m-   dot -Tpdf -otemp.mod.pdf temp.mod.dot
[0m[31m- 
[0m[31m- 
[0m[31m- Done.
[0m